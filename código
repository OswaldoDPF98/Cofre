#include <Key.h>
#include <Keypad.h> // a biblioteca para o teclado 4x4
#include <LiquidCrystal_I2C.h> // a biblioteca para o lcd i2c 1602
#include <Servo.h> // a biblioteca para controlar o motor servo
LiquidCrystal_I2C lcd(0x27,18,2); // obtém o lcd i2c 1602
Servo servo;

#define Tamanho_Senha 5 // o tamanho da senha, se a senha tiver 4 dígitos, defina isso como 5
char Particular[Tamanho_Senha]; // o tamanho da senha 
char Especifico[Tamanho_Senha] = "0000"; // a senha que é chamada de específica no código, altere isso para qualquer coisa que você quiser com os números de 0 a 9 e as letras de A a D
byte Contagem_Particular = 0, Contagem_Especifico = 0; // conta a quantidade de dígitos e verifica se a senha está correta
char Tecla; 
const byte LINHAS = 4; // a quantidade de linhas no teclado
const byte COLUNAS = 4; // a quantidade de colunas no teclado
char teclas[LINHAS][COLUNAS] ={ // define as linhas e colunas

  // define os dígitos do teclado
  {'1','2','3','A'}, 
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

bool PortaInteligente = true; // o servo 
// os pinos para conectar o teclado
byte pinosLinha[LINHAS] = {8, 7, 6, 5}; 
byte pinosColuna[COLUNAS] = {4, 3, 2, 1}; 
Keypad meuTeclado( makeKeymap(teclas), pinosLinha, pinosColuna, LINHAS, COLUNAS); // obtém os dados do teclado

void setup(){

  servo.attach(0); // anexa o servo ao pino 0
  servo.write(180); // fecha o servo quando você diz esta função
  lcd.init(); // inicializa o lcd 
  lcd.backlight(); // liga a luz de fundo
}

void loop(){
  if (PortaInteligente == 0){ // abre a porta inteligente
  
    Tecla = meuTeclado.getKey(); // a palavra tecla = meuTeclado que obtém o valor
    if (Tecla == '#'){ // quando a tecla '#' é pressionada
    
      lcd.clear(); // limpa o display lcd
      servo.write(180); // fecha o motor servo
      lcd.setCursor(4,0); // define o cursor no lcd
      lcd.print("Fechado"); // imprime o texto no lcd      
      delay(3000); // espera 3 segundos
      PortaInteligente = 1; // fecha a porta
      lcd.clear(); // limpa o display lcd
    }
  }
  else Abrir(); // mantém a porta aberta
}

void limparDados(){ // limpa os dados
      
  while (Contagem_Particular != 0){ // conta os dígitos pressionados
        
    Particular[Contagem_Particular--] = 0; // conta quantos dígitos
  }
  
  return; // retorna os dados
}

void Abrir(){ // declarações de função

  lcd.setCursor(1,0); // define o cursor no lcd
  lcd.print("Digite a senha"); // imprime o texto
  Tecla = meuTeclado.getKey(); // obtém as teclas que você pressiona do teclado
  if (Tecla){
    
    Particular[Contagem_Particular] = Tecla; 
    lcd.setCursor(Contagem_Particular, 1); // define o cursor no lcd
    lcd.print("*"); // imprime '*' em vez da senha
    Contagem_Particular++; // conta o tamanho da senha
  }

  if (Contagem_Particular == Tamanho_Senha - 1){ // obtém o tamanho da senha

    if (!strcmp(Particular, Especifico)){ // conta o tamanho e verifica se a senha está correta
      
      lcd.clear(); // limpa o display lcd
      servo.write(90); // move o servo 90 graus
      lcd.setCursor(2,0); // define o cursor no lcd
      lcd.print("Porta aberta");
      lcd.setCursor(2,1); // define o cursor no lcd
      lcd.print("# para fechar");
      PortaInteligente = 0;
    }
    
    else{
      
      lcd.clear(); // limpa o display lcd
      lcd.setCursor(0,0); // define o cursor no lcd
      lcd.print("Senha incorreta"); // imprime o texto/caractere
      lcd.setCursor(0,1);
      lcd.print("Tente em");
      lcd.setCursor(13,1);
      lcd.print("03");
      delay(1000);
      lcd.setCursor(13,1);
      lcd.print("02");
      delay(1000);
      lcd.setCursor(13,1);
      lcd.print("01");
      delay(1000);
      lcd.setCursor(13,1);
      lcd.print("00");
      delay(1000);
      lcd.clear(); // limpa o display lcd
      PortaInteligente = 1; // fecha a porta inteligente
    }
    
    limparDados(); // limpa os dados
  }
}
